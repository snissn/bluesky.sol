"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getVisiblePages = exports.Page = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Page = function Page(_ref) {
  var currentPage = _ref.currentPage,
      index = _ref.index,
      onChange = _ref.onChange,
      className = _ref.className;
  return _react.default.createElement("li", null, _react.default.createElement("a", {
    className: "pagination-link ".concat(className, " ").concat((currentPage === index || index === 1 && !currentPage) && 'is-current'),
    "aria-label": "Goto page ".concat(index),
    "aria-current": index === currentPage && 'page',
    onClick: function onClick() {
      return onChange(index);
    }
  }, index));
};

exports.Page = Page;
Page.propTypes = {
  currentPage: _propTypes.default.number.isRequired,
  index: _propTypes.default.number.isRequired,
  className: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired
};
Page.defaultProps = {
  className: ''
};

var Ellipses = function Ellipses() {
  return _react.default.createElement("li", null, _react.default.createElement("span", {
    className: "pagination-ellipsis"
  }, "\u2026"));
};

var getVisiblePages = function getVisiblePages(visibleRadius, currentPage, maxPages) {
  var visiblePages = [];
  var start = currentPage - visibleRadius;
  var end = currentPage + visibleRadius;

  if (start < 1) {
    start = 1;
    end = start + visibleRadius * 2;
  }

  if (end > maxPages) {
    start = maxPages - visibleRadius * 2;
    end = maxPages;
  }

  if (visibleRadius * 2 + 1 > maxPages) {
    start = 1;
    end = maxPages;
  }

  for (var i = start; i <= end; i++) {
    visiblePages.push(i);
  }

  return visiblePages;
};

exports.getVisiblePages = getVisiblePages;

var Pagination = function Pagination(_ref2) {
  var pages = _ref2.pages,
      currentPage = _ref2.currentPage,
      visibleRadius = _ref2.visibleRadius,
      className = _ref2.className,
      isRounded = _ref2.isRounded,
      isSmall = _ref2.isSmall,
      isMedium = _ref2.isMedium,
      isLarge = _ref2.isLarge,
      isCentered = _ref2.isCentered,
      isRight = _ref2.isRight,
      prevClassName = _ref2.prevClassName,
      nextClassName = _ref2.nextClassName,
      linkClassName = _ref2.linkClassName,
      listClassName = _ref2.listClassName,
      onChange = _ref2.onChange;
  var visiblePages = getVisiblePages(visibleRadius, currentPage, pages);
  var pagesComponents = [];
  var classes = [isRounded && 'is-rounded', isSmall && 'is-small', isMedium && 'is-medium', isLarge && 'is-large', isCentered && 'is-centered', isRight && 'is-right'].filter(Boolean);

  if (visiblePages[0] >= 2) {
    pagesComponents.push(_react.default.createElement(Page, {
      key: "page-1",
      index: 1,
      currentPage: currentPage,
      onChange: onChange
    }));

    if (visiblePages[0] !== 2) {
      pagesComponents.push(_react.default.createElement(Ellipses, {
        key: "ellipses-1"
      }));
    }
  }

  visiblePages.map(function (page) {
    return pagesComponents.push(_react.default.createElement(Page, {
      key: "page-".concat(page),
      index: page,
      currentPage: currentPage,
      onChange: onChange
    }));
  });

  if (currentPage <= pages - visibleRadius - 1 && visiblePages.length < pages) {
    if (currentPage < pages - visibleRadius - 1) {
      pagesComponents.push(_react.default.createElement(Ellipses, {
        key: "ellipses-2"
      }));
    }

    pagesComponents.push(_react.default.createElement(Page, {
      key: "page-".concat(pages),
      className: linkClassName,
      index: pages,
      currentPage: currentPage,
      onChange: onChange
    }));
  }

  return _react.default.createElement("nav", {
    className: "pagination-container pagination ".concat(classes.join(' '), " ").concat(className),
    role: "navigation",
    "aria-label": "pagination"
  }, _react.default.createElement("a", {
    disabled: currentPage === 1,
    className: "pagination-previous nav ".concat(prevClassName),
    onClick: function onClick() {
      return onChange(currentPage - 1);
    }
  }, "Previous"), _react.default.createElement("a", {
    disabled: currentPage === pages,
    className: "pagination-next nav ".concat(nextClassName),
    onClick: function onClick() {
      return onChange(currentPage + 1);
    }
  }, "Next page"), _react.default.createElement("ul", {
    className: "pagination-list ".concat(listClassName)
  }, pagesComponents));
};

Pagination.propTypes = {
  pages: _propTypes.default.number.isRequired,
  currentPage: _propTypes.default.number,
  visibleRadius: _propTypes.default.number,
  className: _propTypes.default.string,
  prevClassName: _propTypes.default.string,
  nextClassName: _propTypes.default.string,
  linkClassName: _propTypes.default.string,
  listClassName: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired,
  isRounded: _propTypes.default.bool,
  isSmall: _propTypes.default.bool,
  isMedium: _propTypes.default.bool,
  isLarge: _propTypes.default.bool,
  isCentered: _propTypes.default.bool,
  isRight: _propTypes.default.bool
};
Pagination.defaultProps = {
  currentPage: 1,
  visibleRadius: 1,
  className: '',
  prevClassName: '',
  nextClassName: '',
  linkClassName: '',
  listClassName: '',
  isRounded: false,
  isSmall: false,
  isMedium: false,
  isLarge: false,
  isCentered: false,
  isRight: false
};
var _default = Pagination;
exports.default = _default;